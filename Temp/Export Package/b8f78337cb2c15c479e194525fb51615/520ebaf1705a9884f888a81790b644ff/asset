using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using UnityEngine.SceneManagement;

public class PlayerStats : CharacterStats
{
    #region Singleton

    public static PlayerStats instance;

    private void Awake()
    {
        if (instance != null)
        {
            Debug.Log("More than one instance of PlayerController found!");
            return;
        }
        instance = this;
    }

    #endregion

    // Access player object
    public GameObject player;

    // Set the move speed
    private float moveSpeed = 5f;

    // the game object's prefab
    public GameObject prefab; 
    public GameObject sword;

    // Declare current health
    public int currentHealth;

    // The time at which the player may attack again (every two seconds the sword may attack an enemy)
    public float timer = 2;    

    // Declare necessary boolean values
    public static bool attack;
    private bool hasRespawned;
    private bool mouseActive;

    // Create statsUI to update the stats
    StatsUI statsUI;

    // Declare all necesary gameobjects and componenets
    public Xp xpBar;
    public HealthBar healthBar;
    public GameObject winScreen;
    public GameObject modifyMenuUI;
    public Transform respawn;
    private GameObject lastEnemy;
    CharacterExperience playerXp;

    // Track player kills
    private int killCount;

    // Combat Strength
    public static int hitStrength = 25;

    // Start is called before the first frame update
    void Start()
    {
        // Instantiate the boolean values
        attack = false;        
        mouseActive = false;
        hasRespawned = false;

        // Set up health bar and XP bar
        killCount = 0;
        playerXp = GetComponent<CharacterExperience>();
        statsUI = StatsUI.instance;
        currentHealth = getMaxHealth();
        healthBar.SetMaxHealth(getMaxHealth());
        xpBar.SetXp(playerXp.xp);
    }

    // Update is called once per frame
    void Update()
    {
        // Lock the cursor if there are no menus to navigate
        if (mouseActive == false)
        {
            Cursor.lockState = CursorLockMode.Locked;
        }

        // Unlock cursor if there are menus to navigate
        if (mouseActive == true)
        {
            Cursor.lockState = CursorLockMode.None;
        }

        // Kill player if health drops below zero
        if (currentHealth <= 0)
        {
            Die();
        }

        // Timer that only allows the player to attack every 2 seconds
        // Essentially so that the player can't spam left shift
        attack = false;
        timer -= Time.deltaTime;

        if (timer < 0 && Input.GetKeyDown(KeyCode.LeftShift))
        {
            timer = 2;
            StartCoroutine(SwordAnimation());
            attack = true;
        }
    }

    // add an enemy kill when the player kills and enemy 
    public void killedEnemy(CharacterExperience enemyXp)
    {
        // Steal the enemies XP and set the xp
        killCount++;
        playerXp.stealExp(enemyXp);
        xpBar.SetXp(playerXp.xp);

        // If the character was able to kill the enemy that stole their XP, reset the respawn
        if (lastEnemy != null && enemyXp.gameObject == lastEnemy.gameObject)
        {
            hasRespawned = false;
        }

        // Check if the boss was defeated
        if (enemyXp.CompareTag("Enemy0"))
        {
            mouseActive = true;

            // Display the win screen
            winScreen.SetActive(true);
            Time.timeScale = 0;
        }
    }

    /// <summary>
    /// Sword prefab animation that pops up when the player attacks
    /// </summary>
    /// <returns></returns>
    IEnumerator SwordAnimation()
    {
        Vector3 pos = new Vector3(-0.9f, 0.6f, 1.03f);
        Quaternion rot = Quaternion.Euler(-50, 0, 90);
        sword = Instantiate(prefab) as GameObject;
        sword.transform.parent = GameObject.Find("FirstPersonPlayer").transform;
        sword.transform.localPosition = pos;
        sword.transform.localRotation = rot;
        yield return new WaitForSeconds(0.5f);
        Destroy(sword);
    }

    // Bring up the menu when a coin is collected
    private void OnTriggerEnter(Collider other)
    {
        // If player picks up red coin add health
        if (other.CompareTag("Health"))
        {
            AudioManager.instance.Play("CoinPickup");
            Destroy(other.gameObject);
            addHealth();
        }

        // If player picks up green coin, add XP
        if (other.CompareTag("xp"))
        {
            AudioManager.instance.Play("CoinPickup");
            playerXp.stealExp(other.GetComponent<CharacterExperience>());
            Destroy(other.gameObject);
            xpBar.SetXp(playerXp.xp);
        }

        // Check if the coin is picked up
        if (other.CompareTag("coin"))
        {
            // Add sound effect
            AudioManager.instance.Play("CoinPickup");

            // Unlock mouse
            mouseActive = true;

            // Collect coin xp
            playerXp.stealExp(other.GetComponent<CharacterExperience>());

            // Adjust xpBar
            xpBar.SetXp(playerXp.xp);

            // Destroy coin and bring up temporary menu
            Debug.Log("The coin has been picked up");
            Destroy(other.gameObject);
            modifyMenuUI.SetActive(!modifyMenuUI.activeSelf);

            // pause the rest of the game
            Time.timeScale = 0;
        }

        // Note when the player is taking damage from the enemy
        if (other.CompareTag("Enemy1") || other.CompareTag("Enemy2") || other.CompareTag("Enemy0"))
        {
            // Save which enemy the player was killed by
            lastEnemy = other.gameObject;
            Debug.Log(lastEnemy.tag);
        }
    }

    // Take damage / reduce healthbar
    public void TakeDamage(int damage)
    {
        AudioManager.instance.Play("Hurt");
        currentHealth -= (damage - defense);
        healthBar.SetHealth(currentHealth);
    }

    // Add to speed if chosen
    public void OnSpeedModifyButton()
    {
        speed = speed + 1;
        moveSpeed += speed;
        Debug.Log("Speed has been added");
        modifyMenuUI.SetActive(false);
        Time.timeScale = 1;
        statsUI.UpdateStats();
        mouseActive = false;
    }

    // Add to strength if chosen
    public void OnStrengthModifyButton()
    {
        strength += 10;
        Debug.Log("Strength has been added");
        modifyMenuUI.SetActive(false);
        Time.timeScale = 1;
        statsUI.UpdateStats();
        mouseActive = false;
    }

    // Add to defense if chosen
    public void OnDefenseModifyButton()
    {
        defense = defense + 1;
        Debug.Log("Defense has been added");
        modifyMenuUI.SetActive(false);
        Time.timeScale = 1;
        statsUI.UpdateStats();
        mouseActive = false;
    }

    // There are two cases that can occur when the player dies. They either earn another
    // chance to restore their lost XP, or they failed and the game restarts.
    override public void Die()
    {
        // If the player has not respawned yet, they have a chance to retrieve their
        // lost XP from the last enemy that killed them
        if (hasRespawned == false)
        {
            
            base.Die();
            currentHealth = getMaxHealth();
            healthBar.SetHealth(currentHealth);

            // Spawn player at spawn point
            GetComponent<Transform>().position = respawn.position;

            // Tag the enemy
            TagEnemy(lastEnemy);
            
            // Enemy steals the player's current XP
            CharacterExperience enemyXp = lastEnemy.GetComponent<CharacterExperience>();
            enemyXp.stealExp(playerXp);

            // Set the XP and count the respawn
            xpBar.SetXp(playerXp.xp);
            hasRespawned = true;
        }
        else if (hasRespawned == true)
        {
            base.Die();
            SceneManager.LoadScene("Main");
        }
    }

    // Place a red sphere above the enemy's head that killed the player last
    public void TagEnemy(GameObject enemy)
    {
        Transform enemyTag = enemy.transform.Find("EnemyTag");
        enemyTag.gameObject.SetActive(true);
    }

    // Add 10hp if the player picks up red coin
    public void addHealth()
    {
        currentHealth += 10;
        healthBar.SetHealth(currentHealth);
    }

    public float getSpeed()
    {
        return moveSpeed;        
    }
}
